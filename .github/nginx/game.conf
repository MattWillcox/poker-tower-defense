server {
    listen 80;
    server_name 64.23.162.247;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }

    # Let's Encrypt verification
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}

server {
    listen 443 ssl;
    server_name 64.23.162.247;

    # SSL certificates managed by Certbot
    ssl_certificate /etc/letsencrypt/live/64.23.162.247/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/64.23.162.247/privkey.pem;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Enable Gzip Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # CORS headers for all responses
    add_header 'Access-Control-Allow-Origin' 'https://mattwillcox.github.io/poker-tower-defense' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Origin, X-Requested-With' always;
    add_header 'Access-Control-Max-Age' '86400' always;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    # Default API Response
    location / {
        return 200 "Poker Tower Defense API Server";
        add_header Content-Type text/plain;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # WebSocket Configuration
    location /ws {
        proxy_pass http://localhost:3000/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 3600s; # Increased timeout for WebSocket connections
        proxy_buffering off; # Ensure real-time WebSocket data transfer
    }

    # API Proxy Pass
    location /api {
        proxy_pass http://localhost:3000/api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
}
